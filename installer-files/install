#!/bin/sh


conf_src="/root/config"


error() {
	src="$1"
	msg="$2"
	echo "error: $msg ($src)"
	exit 1
}

config() {
	cat /root/choices.yml | yq eval .$1 -
}

enabled() {
        if [ "$(config "$1")" = true ]
        then
                return 0
        else
                return 1
        fi
}

persist() {
	# saves filesystem changes to persist after install and reboot
	lbu add $1
}

verbose=$(config 'verbose')


#===============
# dependency checks
#===============


if [ $(config 'graphics.preset') = "river" ] && ! enabled 'system.repository.apk.edge-testing'
then
	error system.repository.apk.edge-testing "riverwm requires enabling the apk edge/testing repository"
fi

if [ $('config.shell') = "zsh" ] && ! enabled 'packages.zsh'
then
	error config.shell "using zsh as default shell requires installing zsh"
fi

if enabled 'packages.alpine-zsh-config' && ! enabled 'packages.zsh'
then
	echo "warning: installing zsh default config but not zsh"
fi


#===============
# alpine install
#===============


# keyboard
layout=$(config 'system.keyboard.layout')
variant=$(config 'system.keyboard.variant')
setup-keymap $layout $variant

# hostname
hostname=$(config 'system.hostname')
setup-hostname $hostname
rc-service hostname restart

# network
# network is already taken care of by the init script
# but has to be enabled after reboot
if enabled 'system.services.networkmanager'
then
	rc-update add networkmanager boot
fi

# timezone
timezone=$(config 'system.timezone')
setup-timezone $timezone

# apk repos
# apk repos are already configured by the prepare script
# this will override the default configuration before installing
mirror=$(config 'system.repository.apk.mirror')
case $mirror in
	default)
		args="-1";;
	fastest)
		args="-f";;
	random)
		args="-r";;
esac
if enabled 'system.repository.apk.community'
then
	args="-c $args"
fi
setup-apkrepos $args
# TODO: test
if enabled 'system.repository.apk.edge-testing'
then
	mirror_url=$(cat /etc/apk/repositories | tail -n 1 | cut -d "/" -f 1-4)
	edge_testing="$mirror_url/edge/testing"
	echo "$edge_testing" >> /etc/apk/repositories
fi


# main user
username=$(config 'system.user.username')
password=$(config 'system.user.password')
fullname=$(config 'system.user.fullname')
# -a: admin (using this installs doas automatically)
# -g: groups
setup-user -a -g 'audio video netdev' -f "$fullname" "$username"
# networkmanager uses the plugdev group for rootless interface management
if enabled 'system.services.networkmanager'
then
	adduser "$username" plugdev
fi

# set the password for the user
echo "$username:$password" | chpasswd
persist /home/$username
# TODO: remove after testing
# copy installer files to the home of the main user
# not needed anymore, since the install step does everything the setup step did
#cp -r /root/config /home/"$username"
#cp /root/setup /home/"$username"
#persist /home/$username


# boot system services
if enabled "system.services.seedrng"
then
	rc-update add seedrng boot
fi

# other system services
for service in crond acpid
do
	if enabled "system.services.$service"
	then
		rc-update add $service
	fi
done


#==========================
# Custom configuration
#==========================

# TODO:

pkgadd() {
	pkg="$1"
	if $verbose
	then
		apk add $pkg
	else
		apk add $pkg > /dev/null
	fi
}

pkgdel() {
	pkg="$1"
	if $verbose
	then
		apk del $pkg
	else
		apk del $pkg > /dev/null
	fi
}


error_unknown() {
	setting="$1"
	error $setting "unrecognized_setting"
}


# lock root account
passwd -l root


apk update

# packages
for pkg in firefox btop zsh alpine-zsh-config flatpak
do
	if enabled 'packages.'$pkg
	then
		echo "installing package $pkg" 
		pkgadd $pkg
	fi
done


# services
for service in polkit
do
	if enabled 'services.'$service
	then
		echo "installing service $service"
		pkgadd $service
		rc-update add $service
		rc-service $service start
	fi
done

# is udisks2 a service ? on ubuntu, yes, on alpine, no
if enabled 'services.udisks2'
then
	pkgadd udisks2
fi


if enabled 'services.polkit'
then
	# TODO: test
	#mkdir -p /etc/polkit/rules.d
	cp "$conf_src"/etc/polkit-1/rules.d/* /etc/polkit-1/rules.d/
fi


ssh=$(config 'services.ssh')
case $ssh in
	openssh)
		setup-sshd openssh;;
	none)
		echo "skipping ssh server";;
	*)
		error_unknown "services.ssh";;
esac


# graphics
preset=$(config 'graphics.preset')
case $preset in
	river)
		echo "setting up river window manager"

		pkgadd river
		rc-service seatd start
		rc-update add seatd boot
		adduser $(config 'system.user.username') seat
		pkgadd xwayland

		# udev is already setup by the init script
		#setup-devd udev

		# configure river
		home="/home/$username"
		confdir="$home/.config"

		path="/home/$username/.config/river"
		mkdir -p "$confdir/river"

		cp "$conf_src"/configs/river/river-init "$confdir/river/init"
		chmod +x "$confdir/river/init"



		launcher=$(config 'graphics.options.river.launcher')
		case $launcher in
			bemenu)
				pkgadd bemenu
				;;
			wofi)
				error "not implemented" graphics.options.river.launcher
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.launcher;;
		esac

		bar=$(config 'graphics.options.river.bar')
		case $bar in
			waybar)
				mkdir "$confdir/waybar"
				cp "$conf_src"/configs/river/waybar-config.json "$confdir/waybar/config"
				pkgadd waybar
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.bar
		esac

		cp "$conf_src"/configs/river/xdg-profile.sh /etc/profile.d/xdg-runtime-dir.sh
		# TODO:Â chmod +x ?

		pkgadd font-dejavu

		background=$(config 'graphics.options.river.background')
		case $background in
			swaybg)
				pkgadd swaybg
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.background
		esac
		terminal=$(config 'graphics.options.river.terminal')
		case $terminal in
			foot)
				pkgadd foot
				;;
			*)
				error_unknown graphics.options.river.terminal
		esac

		# needed for waybar
		pkgadd dbus
		pkgadd dbus-x11

		explorer=$(config 'graphics.options.river.explorer')
		case $explorer in
			thunar)
				pkgadd thunar
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.explorer
				;;
		esac
		login=$(config 'graphics.options.river.login')
		case $login in
			greetd-wlgreet)
				echo "setting up greetd session manager"
				pkgadd greetd-wlgreet
				cp "$conf_src"/configs/river/greetd-config.toml /etc/greetd/config.toml
				cp "$conf_src"/configs/river/river-wlgreet-config /etc/greetd/river-wlgreet-config
				chmod +x /etc/greetd/river-wlgreet-config
				#chmod u+x /etc/greetd/river-wlgreet-config
				#chown greetd /etc/greetd/river-wlgreet-config

				adduser greetd seat
				# TODO: carefully test before doing this
				# (every failed test interrupts the terminal)
				#rc-service greetd start
				rc-update add greetd
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.login
				;;
		esac
		;;
	xfce)
		# on a clean alpine install, these instructions are enough to make XFCE work
		# test these instructions manually first, and then install
		setup-xorg-base
		apk add xfce4 xfce4-terminal xfce4-screensaver lightdm-gtk-greeter
		#rc-service lightdm start
		rc-update add lightdm


		# replace lightdm keyboard
		layout=$(config graphics.options.xfce.xkeyboard.layout)
		variant=$(config graphics.options.xfce.xkeyboard.variant)

		if ! [ "$layout" = "none" ]
		then
			apk add setxkbmap
			sed -i "s/#display-setup-script=/display-setup-script=setxkbmap $layout $variant/g" /etc/lightdm/lightdm.conf
		fi

		# udev is already setup by the init script
		#setup-devd udev
		;;
esac

# configure the system
if [ $(config 'config.shell') = "zsh" ]
then
	# every user will use zsh
	sed -i 's/ash/zsh/g' /etc/passwd
fi


# remove live packages and services which have been disabled

if ! enabled 'system.services.networkmanager'
then
	rc-update del networkmanager boot
	rc-service networkmanager stop
	apk del networkmanager
fi

# yq has to be removed last (since the configuration checks rely on it)
for tmp_pkg in vim nano yq
do
	if ! enabled 'packages.'$tmp_pkg
	then
		apk del $tmp_pkg
	fi
done



# disk install
yes | setup-disk -m sys /dev/vda

