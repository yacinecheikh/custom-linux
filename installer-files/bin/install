#!/bin/sh


# needed in order to read the config
apk add yq

config() {
	cat /root/config/choices.yml | yq eval .$1 -
}

enabled() {
        if [ "$(config "$1")" = true ]
        then
                return 0
        else
                return 1
        fi
}

persist() {
	# saves filesystem changes to persist after install and reboot
	lbu add $1
}

# keyboard
layout=$(config 'system.keyboard.layout')
variant=$(config 'system.keyboard.variant')
setup-keymap $layout $variant

# hostname
hostname=$(config 'system.hostname')
setup-hostname $hostname
rc-service hostname restart

# network
# network is already taken care of by the init script
# but has to be enabled after reboot
if enabled 'system.services.networkmanager'
then
	rc-update add networkmanager boot
fi

# timezone
timezone=$(config 'system.timezone')
setup-timezone $timezone

# apk repos
# apk repos are already configured by the prepare script
# this will override the default configuration before installing
mirror=$(config 'system.repository.apk.mirror')
case $mirror in
	default)
		args="-1";;
	fastest)
		args="-f";;
	random)
		args="-r";;
esac
if enabled 'system.repository.apk.community'
then
	args="-c $args"
fi
setup-apkrepos $args
if enabled 'system.repository.apk.edge-testing'
then
	mirror_url=$(cat /etc/apk/repositories | tail -n 1 | cut -d "/" -f 1-4)
	edge_testing="$mirror_url/edge/testing"
	echo "$edge_testing" >> /etc/apk/repositories
fi


# main user
username=$(config 'system.user.username')
password=$(config 'system.user.password')
# -a: admin (using this installs doas automatically)
# -g: groups
setup-user -a -g 'audio video netdev' "$username"
# TODO: adduser $username plugdev (if enabled 'system.services.networkmanager')
# the 'plugdev' group is added by NetworkManager, for rootless network management

# set the password for the user
echo "$username:$password" | chpasswd
# copy installer files to the home of the main user
cp -r /root/config /home/"$username"
cp /root/setup /home/"$username"
persist /home/$username


if enabled "system.services.seedrng"
then
	rc-update add seedrng boot
fi

for service in crond acpid
do
	if enabled "system.services.$service"
	then
		rc-update add $service
	fi
done



# disk install
yes | setup-disk -m sys /dev/vda

#!/bin/sh

# assumes alpine linux is already installed, and the script is running from an existing fresh install


# setup config:
config() {
	cat config/choices.yml | yq eval .$1 -
}

enabled() {
	if [ "$(config "$1")" = true ]
	then
		return 0
	else
		return 1
	fi
}

pkgadd() {
	pkg="$1"
	if $verbose
	then
		apk add $pkg
	else
		apk add $pkg > /dev/null
	fi
}

error() {
	msg="$1"
	src="$2"
}

# do not test for real without a virtual environment
exit 0

verbose=$(config 'verbose')

# lock root account
passwd -l root


apk update

# packages
for pkg in vim nano firefox btop
do
	if enabled 'packages.'$pkg
	then
		echo "installing package $pkg" 
		pkgadd $pkg
	fi
done
if ! enabled 'packages.yq'
then
	apk del yq
fi

# services
for service in polkit networkmanager udisks
do
	if enabled 'services.'$service
	then
		echo "installing service $service"
		apk add $service
		rc-update add $service
		rc-service $service start
	fi
done

ssh=$(config 'services.ssh')
case $ssh in
	openssh)
		setup-sshd openssh
		;;
	none)
		echo "skipping ssh server"
		;;
	*)
		error "unrecognized setting" "services.ssh"
esac


# graphics
preset=$(config 'graphics.preset')
case $preset in
	river)
		if ! enabled 'system.repository.apk.test'
		then
			echo "warning: riverwm requires enabling the apk test repository (system.repository.apk.test in choices.yml)"
		fi
		launchbar=$(config 'graphics.options.river.launcher')
		bar=$(config 'graphics.options.river.bar')
		background=$(config 'graphics.options.river.background')
		login=$(config 'graphics.options.river.login')
		terminal=$(config 'graphics.options.river.terminal')
		echo "not implemented"
		echo "launchbar: $launchbar"
		echo "bar: $bar"
		echo "background: $background"
		echo "login: $login"
		echo "terminal: $terminal"
		;;
	xfce)
		echo "not implemented"
		;;
esac

gui=$(config '.wm-presets.[0].name')
# case/esac
if [ "$gui" = "river" ]
then
	echo "setting up river window manager"
	# add edge testing repos
	# TODO: fix the content of repository-config
	# TODO: refactor configs into a file
	cat configs/river/apk-edge-repository >> /etc/apk/repositories
	apk add river
	rc-service seatd start
	rc-update add seatd
	adduser $(config '.system.user') seat
	apk add xwayland
	setup-devd udev
	# TODO: make this path-independant
	# (/home/{system user}/.config/river/init)
	path=".config/river"
	mkdir -p .config/river
	#touch .config/river/init
	#chmod +x .config/river/init
	cp configs/river/river-init .config/river/init
	chmod +x .config/river/init

	mkdir .config/waybar
	cp configs/river/waybar-config.json .config/waybar/config

	cp configs/river/xdg-profile.sh /etc/profile.d/xdg-runtime-dir.sh
	# TODO:Â chmod +x ?

	apk add font-dejavu

	# utilities
	apk add swaybg
	apk add firefox
	apk add foot
	apk add waybar
	apk add dbus dbus-x11 # needed for waybar
	launchbar=$(config '.wm-presets.[0].options.launchbar.[0]')
	# TODO: implement wofi choice
	if [ "$launchbar" = "bemenu" ]
	then
		apk add bemenu
	fi
	apk add thunar



	# session management
	login=$(config '.wm-presets.[0].options.login.[0]')
	if [ "$login" = "greetd-wlgreet" ]
	then
		echo "setting up greetd session manager"
		apk add greetd-wlgreet
		cp configs/river/greetd-config.toml /etc/greetd/config.toml
		cp configs/river/river-wlgreet-config /etc/greetd/river-wlgreet-config

		adduser greetd seat
		# TODO: carefully test before doing this
		#rc-service greetd start
		#rc-update add greetd
	fi

fi


optionals=$(config '.optional')
# TODO: for loop and apk add on each item
echo "not implemented: auto-installing optional features: $optionals"



