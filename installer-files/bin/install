#!/bin/sh


config_path="./config"


config() {
	cat /root/config/choices.yml | yq eval .$1 -
}

enabled() {
        if [ "$(config "$1")" = true ]
        then
                return 0
        else
                return 1
        fi
}

persist() {
	# saves filesystem changes to persist after install and reboot
	lbu add $1
}

verbose=$(config 'verbose')


#===============
# dependency checks
#===============


if [ $(config 'graphics.preset') = "river" ] && ! enabled 'system.repository.apk.test'
then
	echo "error: riverwm requires enabling the apk test repository (system.repository.apk.test in choices.yml)"
	exit 1
fi


#===============
# alpine install
#===============


# keyboard
layout=$(config 'system.keyboard.layout')
variant=$(config 'system.keyboard.variant')
setup-keymap $layout $variant

# hostname
hostname=$(config 'system.hostname')
setup-hostname $hostname
rc-service hostname restart

# network
# network is already taken care of by the init script
# but has to be enabled after reboot
if enabled 'system.services.networkmanager'
then
	rc-update add networkmanager boot
fi

# timezone
timezone=$(config 'system.timezone')
setup-timezone $timezone

# apk repos
# apk repos are already configured by the prepare script
# this will override the default configuration before installing
mirror=$(config 'system.repository.apk.mirror')
case $mirror in
	default)
		args="-1";;
	fastest)
		args="-f";;
	random)
		args="-r";;
esac
if enabled 'system.repository.apk.community'
then
	args="-c $args"
fi
setup-apkrepos $args
# TODO: test
if enabled 'system.repository.apk.edge-testing'
then
	mirror_url=$(cat /etc/apk/repositories | tail -n 1 | cut -d "/" -f 1-4)
	edge_testing="$mirror_url/edge/testing"
	echo "$edge_testing" >> /etc/apk/repositories
fi


# main user
username=$(config 'system.user.username')
password=$(config 'system.user.password')
fullname=$(config 'system.user.fullname')
# -a: admin (using this installs doas automatically)
# -g: groups
setup-user -a -g 'audio video netdev' -f "$fullname" "$username"
# TODO: adduser $username plugdev (if enabled 'system.services.networkmanager')
# the 'plugdev' group is added by NetworkManager, for rootless network management

# set the password for the user
echo "$username:$password" | chpasswd
# copy installer files to the home of the main user
cp -r /root/config /home/"$username"
cp /root/setup /home/"$username"
persist /home/$username


# boot system services
if enabled "system.services.seedrng"
then
	rc-update add seedrng boot
fi

# other system services
for service in crond acpid
do
	if enabled "system.services.$service"
	then
		rc-update add $service
	fi
done


#==========================
# Custom configuration
#==========================

# TODO:

pkgadd() {
	pkg="$1"
	if $verbose
	then
		apk add $pkg
	else
		apk add $pkg > /dev/null
	fi
}

pkgdel() {
	pkg="$1"
	if $verbose
	then
		apk del $pkg
	else
		apk del $pkg > /dev/null
	fi
}

error() {
	src="$1"
	msg="$2"
	echo "error: $msg ($src)"
}

error_unknown() {
	setting="$1"
	error $setting "unrecognized_setting"
}


# lock root account
passwd -l root


apk update

# packages
for pkg in firefox btop
do
	if enabled 'packages.'$pkg
	then
		echo "installing package $pkg" 
		pkgadd $pkg
	fi
done

# these packages were added in the live environment
for tmp_pkg in vim nano yq
do
	if ! enabled 'packages.'$tmp_pkg
	then
		apk del $tmp_pkg
	fi
done

# services
for service in polkit networkmanager udisks
do
	if enabled 'services.'$service
	then
		echo "installing service $service"
		apk add $service
		rc-update add $service
		rc-service $service start
	fi
done

if enabled 'services.polkit'
then
	# TODO: test
	#mkdir -p /etc/polkit/rules.d
	cp "$config_path"/etc/polkit-1/rules.d/* /etc/polkit-1/rules.d/
fi

# these services were added in the live environment
for tmp_service in networkmanager
do
	if ! enabled 'services.'$service
	then
		rc-update del $service
		rc-service $service stop
		apk del $service
	fi
done


ssh=$(config 'services.ssh')
case $ssh in
	openssh)
		setup-sshd openssh
		;;
	none)
		echo "skipping ssh server"
		;;
	*)
		error_unknown "services.ssh"
esac


# graphics
preset=$(config 'graphics.preset')
case $preset in
	river)
		echo "setting up river window manager"

		pkgadd river
		rc-service seatd start
		rc-update add seatd
		adduser $(config '.system.user') seat
		pkgadd xwayland

		# udev is already setup by the init script
		#setup-devd udev

		# configure river
		path="/home/$username/.config/river"
		mkdir -p "$path"

		cp "$config_path"/river/river-init "$path/init"
		chmod +x "$path/init"



		launcher=$(config 'graphics.options.river.launcher')
		case $launcher in
			bemenu)
				pkgadd bemenu
				;;
			wofi)
				error "not implemented" graphics.options.river.launcher
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.launcher
		apk add bemenu

		bar=$(config 'graphics.options.river.bar')
		case $bar in
			waybar)
				mkdir "/home/$username/.config/waybar"
				cp "$config_path"/river/waybar-config.json "$path"/.config/waybar/config
				pkgadd waybar
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.bar
		esac

		cp configs/river/xdg-profile.sh /etc/profile.d/xdg-runtime-dir.sh
		# TODO:Â chmod +x ?

		pkgadd font-dejavu

		background=$(config 'graphics.options.river.background')
		case $background in
			swaybg)
				pkgadd swaybg
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.background
		esac
		terminal=$(config 'graphics.options.river.terminal')
		case $terminal in
			foot)
				pkgadd foot
				;;
			*)
				error_unknown graphics.options.river.terminal
		esac

		pkgadd dbus dbus-x11 # needed for waybar

		explorer=$(config 'graphics.options.river.explorer')
		case $explorer in
			thunar)
				pkgadd thunar
				;;
			none)
				;;
			*)
				error_unknown graphics.options.river.explorer
				;;
		esac
		login=$(config 'graphics.options.river.login')
		case $login in
			greetd-wlgreet)
				echo "setting up greetd session manager"
				pkgadd greetd-wlgreet
				cp "$config_path"/river/greetd-config.toml /etc/greetd/config.toml
				cp configs/river/river-wlgreet-config /etc/greetd/river-wlgreet-config

				adduser greetd seat
				# TODO: carefully test before doing this
				# (every failed test interrupts the terminal)
				#rc-service greetd start
				#rc-update add greetd
				;;
			none)
				;;
			*)
				;;
		esac
		echo "not implemented"
		echo "login: $login"
		;;
	xfce)
		echo "not implemented"
		;;
esac

# disk install
yes | setup-disk -m sys /dev/vda

